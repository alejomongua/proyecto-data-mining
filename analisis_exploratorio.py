# -*- coding: utf-8 -*-
"""Análisis exploratorio

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fu3GLhQaJf3R6FkumKy7Mg0jGn6G9Zj_

# Análisis exploratorio del dataset de revisiones técnico mecánicas

## Grupo

* Luis Alejandro Mongua López [lamongual@unal.edu.co](lamongual@unal.edu.co)
* Ivanhoe Rozo Rojas [irozor@unal.edu.co](irozor@unal.edu.co)
* Camilo Alfonso Mosquera Benavides [camosquerab@unal.edu.co](camosquerab@unal.edu.co)

## Descripción general del dataset

El dataset corresponde a los resultados de las revisiones técnico-mecánicas de vehículos automotores livianos y motocicletas en un CDA (Centro de Diagnóstico Automotor) en la ciudad de Bogotá entre los años 2014 y 2022, incluye algunos valores cualitativos y otros cuantitativos. La cantidad de registros se estima en 300.000, organizados en 133 variables. 

Es de anotar que la normativa y los criterios de auditoría han cambiado durante el transcurso de los años en los que la muestra es tomada, por lo que algunas columnas pueden no contener valores antes de una fecha determinada. También hay que tener en cuenta que algunos datos no aplican para algunos tipos de vehículo, por ejemplo, las motocicletas no cuentan con valores cuantitativos del estado de la suspensión, y los vehículos que funcionan con combustible diesel no tienen valores en los campos de emisiones de HC, CO, CO2 ni O2 (sus emisiones se miden en porcentaje de opacidad)

Los datos fueron extraídos de la base de datos de inspecciones de un CDA y fueron anonimizados para no violar las políticas de privacidad y protección de datos personales.

Primero montamos el drive para poder acceder al archivo csv con los datos
"""

# Montar el drive para poder acceder al archivo del dataset
from google.colab import drive
drive.mount('/content/drive')

"""Posteriormente importamos todas las librerías necesarias"""

# Commented out IPython magic to ensure Python compatibility.
# Importaciones y setup
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pickle
# %matplotlib inline

"""A continuación se importa el dataset

Nota posterior: Se verifica primero si ya existen datos preprocesados, si es así entonces se importa el dataset pre-procesado
"""

df = pd.read_hdf('/content/drive/Shareddrives/Data_mining/dataset.hdf')
df

"""## Limpieza de datos

Como los datos vienen de un CSV, se encuentra que algunas columnas están como "string" cuando deberían ser float, int o bool, así que se hace una limpieza de datos de acuerdo al tipo de dato.

Conociendo la naturaleza de los datos, se organizan los siguientes arrays:
"""

DATOS_FLOAT = [
    'adherencia__eje1__de',
    'adherencia__eje1__iz',
    'adherencia__eje2__de',
    'adherencia__eje2__iz',
    'desviacion_lateral__eje1',
    'desviacion_lateral__eje2',
    'frenos__eficacia_total',
    'frenos__eficacia_auxiliar',
    'frenos__desequilibrio_eje_1',
    'frenos__desequilibrio_eje_2',
    'gases__opacidad_promedio',
    'gases__ralenti__co',
    'gases__ralenti__co2',
    'gases__ralenti__o2',
    'gases__ralenti__hc',
    'luces__intensidad__total',
    'taxi__error_distancia',
    'taxi__error_tiempo',
    'profundidad_minima',
    'luces__inclinacion__baja1_de',
    'luces__inclinacion__baja1_iz',
    'luces__intensidad__baja1_de',
    'luces__intensidad__baja1_iz',
]

DATOS_OBJECT = [
    'combustible',
    'marca',
    'linea',
    'tipo_revision_id',
    'fecha_inicio',
    'fecha_fin',
]

"""Ahora se cambia el tipo de dato de cada columna según corresponda"""

# Tipos de datos flotantes:
for column_name in DATOS_FLOAT:
  df[column_name] = df[column_name].replace('', np.nan)
  print(column_name, list(df[column_name].unique())[0:10], len(list(df[column_name].unique())), "valores distintos")
  df[column_name] = df[column_name].astype('float')

"""Se encuentra que algunas columnas no contienen información relevante, así que se eliminan para limpiar el dataset"""

df.head()

df.tail()

df.sample(frac=0.1)._get_numeric_data().describe()

"""# Tipo de vehículo"""

tipo_revision = df[df['tipo_revision_id'] < 5].groupby('tipo_revision_id').size().sort_values(ascending=False)
plt.title('Tipos de vehículo')
plt.hist(tipo_revision.index, weights=tipo_revision.values)

"""# Combustible"""

combustible = df.groupby('combustible').size().sort_values(ascending=False).head(4)
plt.xticks(rotation=45)
plt.title('Tipos de combustible')
plt.hist(combustible.index, weights=combustible.values)

"""## Análisis de los datos de gases

Ahora extraeremos los datos cualitativos de los resultados de la prueba de gases.
"""

# Seleccionaremos para este análisis solo vehículos livianos
livianos_df = df[df['tipo_revision_id'] == 1]
livianos_df.shape

# Seleccione solo las marcas con más datos
top_marcas = livianos_df.groupby('marca').size().sort_values(ascending=False).head(10)
plt.xticks(rotation=45)
plt.title('Top marcas')
plt.hist(top_marcas.index, weights=top_marcas.values)
top_marcas = top_marcas[:5]

# Seleccione solo las lineas con más datos
top_lineas = livianos_df.groupby('linea').size().sort_values(ascending=False).head(10)
plt.xticks(rotation=45)
plt.title('Top líneas')
plt.hist(top_lineas.index, weights=top_lineas.values)

CAMPOS_GASES = [
    'gases__ralenti__hc',
    'gases__ralenti__co',
    'gases__ralenti__co2',
    'gases__ralenti__o2',
    'marca'
]
gases_df2 = df[df['marca'].isin(top_marcas.index)][CAMPOS_GASES].tail(1000)
sns.pairplot(gases_df2, hue='marca')
df.shape

for marca in list(top_marcas.index):
  print(marca)
  plt.hist(df[df['marca'] == marca]['gases__ralenti__hc'], bins=40, range=(0, 1000))
  plt.show()

"""### Exploración de emisiones por modelo"""

modelos_nuevos = livianos_df[livianos_df['modelo'] >= 1998]
modelos_nuevos.shape

plt.hist(modelos_nuevos['gases__ralenti__hc'], bins=40, range=(0, 400))
plt.show()
plt.hist(modelos_nuevos['gases__ralenti__hc'], range=(100, 300))
plt.show()

opacidad = df[(df['modelo'] >= 1998) & (df['gases__opacidad_promedio'] > 0)]
plt.hist(opacidad['gases__opacidad_promedio'], bins=40, range=(0,100))
plt.show()
plt.hist(opacidad['gases__opacidad_promedio'], range=(30, 40))
plt.show()

plt.hist(modelos_nuevos['gases__ralenti__co'], bins=40, range=(0, 2))
plt.show()
plt.hist(modelos_nuevos['gases__ralenti__co'], bins=9, range=(0.5, 2))
plt.show()

modelos_2 = livianos_df[(livianos_df['modelo'] < 1998) & (livianos_df['modelo'] >= 1985)]
modelos_2.shape

plt.hist(modelos_2['gases__ralenti__hc'], bins=40, range=(0, 600))
plt.show()
plt.hist(modelos_2['gases__ralenti__hc'], range=(300, 500))
plt.show()

plt.hist(modelos_2['gases__ralenti__co'], bins=40, range=(0, 5))
plt.show()
plt.hist(modelos_2['gases__ralenti__co'], bins=7, range=(1, 8))
plt.show()

motos = df[df['tipo_revision_id'] == 4]
motos.shape

plt.hist(motos['gases__ralenti__co'], bins=40, range=(0, 6))
plt.show()
plt.hist(motos['gases__ralenti__co'], range=(3.5, 6))
plt.show()

plt.hist(motos['gases__ralenti__hc'], bins=40, range=(0, 6000))
plt.show()
plt.hist(motos['gases__ralenti__hc'], range=(1500, 4000))
plt.show()

plt.hist(df['luces__inclinacion__baja1_de'], bins=40, range=(-1, 5))
plt.show()
plt.hist(df['luces__intensidad__baja1_de'], bins=12, range=(0, 6))
plt.show()

plt.hist(df['adherencia__eje1__de'], bins=40, range=(0, 99))
plt.show()
plt.hist(df['adherencia__eje1__iz'], bins=40, range=(0, 99))
plt.show()
plt.hist(df['adherencia__eje2__de'], bins=40, range=(0, 99))
plt.show()
plt.hist(df['adherencia__eje2__iz'], bins=40, range=(0, 99))
plt.show()

plt.hist(df['desviacion_lateral__eje1'], bins=40, range=(-15, 15))
plt.show()
plt.hist(df['desviacion_lateral__eje1'], range=(-12, -8))
plt.show()
plt.hist(df['desviacion_lateral__eje1'], range=(8, 12))
plt.show()
plt.hist(df['desviacion_lateral__eje2'], bins=40, range=(-15, 15))
plt.show()

plt.hist(df['frenos__desequilibrio_eje_1'], bins=40, range=(0, 50))
plt.show()
plt.hist(df['frenos__desequilibrio_eje_1'], range=(25, 35))
plt.show()
plt.hist(df['frenos__desequilibrio_eje_2'], bins=40, range=(0, 50))
plt.show()
plt.hist(df['frenos__desequilibrio_eje_2'], range=(25, 35))
plt.show()

plt.hist(df['taxi__error_distancia'], bins=40, range=(-10, 10))
plt.show()
plt.hist(df['taxi__error_distancia'], range=(-3, -1))
plt.show()
plt.hist(df['taxi__error_distancia'], range=(1, 3))
plt.show()
plt.hist(df['taxi__error_tiempo'], bins=40, range=(-10, 10))
plt.show()
plt.hist(df['taxi__error_tiempo'], range=(-3, -1))
plt.show()
plt.hist(df['taxi__error_tiempo'], range=(1, 3))
plt.show()

data = df[(df['gases__ralenti__hc'] <= 200) & \
          (df['gases__ralenti__hc'] >= 0) & \
          (df['gases__ralenti__co'] <= 1) & \
          (df['gases__ralenti__co'] >= 0) & \
          (df['gases__ralenti__o2'] <= 5) & \
          (df['gases__ralenti__o2'] >= 0) & \
          (df['gases__ralenti__co2'] >= 7) & \
          (df['gases__ralenti__co2'] < 16)]
data = data.sample(frac=0.1)

fig = plt.figure()
ax = fig.add_subplot(projection='3d')

ax.set_xlabel('O2')
ax.set_ylabel('CO2')
ax.set_zlabel('CO')

x = data['gases__ralenti__o2']
y = data['gases__ralenti__co2']
z = data['gases__ralenti__co']

ax.scatter(x, y, z, s=1)
ax.view_init(50, 120)

plt.show()

df.shape